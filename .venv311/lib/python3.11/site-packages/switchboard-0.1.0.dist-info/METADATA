Metadata-Version: 2.4
Name: switchboard
Version: 0.1.0
Summary: Switchboard — MCP↔ACP governance control plane with policy, approvals, and signed provenance.
Author: Switchboard Contributors
License-Expression: Apache-2.0
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi>=0.115.0
Requires-Dist: uvicorn[standard]>=0.30.0
Requires-Dist: pydantic>=2.7.0
Requires-Dist: httpx>=0.27.0
Requires-Dist: python-dateutil>=2.9.0
Requires-Dist: cbor2>=5.6.0
Requires-Dist: cryptography>=43.0.0
Requires-Dist: sigstore>=2.1.0
Requires-Dist: python-dotenv>=1.0.1
Requires-Dist: opentelemetry-api>=1.26.0
Requires-Dist: opentelemetry-sdk>=1.26.0
Requires-Dist: opentelemetry-exporter-otlp>=1.26.0
Requires-Dist: opentelemetry-instrumentation-fastapi>=0.47b0
Requires-Dist: structlog>=24.2.0
Requires-Dist: langgraph>=1.0.0
Requires-Dist: langchain>=0.2.11
Requires-Dist: typer>=0.12.4
Requires-Dist: rich>=13.9.1
Requires-Dist: jinja2>=3.1.4
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: aiosqlite>=0.20.0
Requires-Dist: asyncpg>=0.29.0
Requires-Dist: tenacity>=8.4.2
Requires-Dist: orjson>=3.10.7
Requires-Dist: streamlit>=1.37.0
Provides-Extra: dev
Requires-Dist: pytest>=8.3.3; extra == "dev"
Requires-Dist: pytest-asyncio>=0.23.8; extra == "dev"
Requires-Dist: pytest-cov>=5.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.14.0; extra == "dev"
Requires-Dist: httpx>=0.27.0; extra == "dev"
Requires-Dist: ruff>=0.6.9; extra == "dev"
Requires-Dist: black>=24.8.0; extra == "dev"
Requires-Dist: mypy>=1.11.2; extra == "dev"
Requires-Dist: types-requests>=2.32.0.20241016; extra == "dev"
Requires-Dist: types-pyyaml>=6.0.12.20240917; extra == "dev"
Requires-Dist: hypothesis>=6.115.0; extra == "dev"
Requires-Dist: pytest-httpx>=0.32.0; extra == "dev"
Requires-Dist: tox>=4.23.2; extra == "dev"
Requires-Dist: pre-commit>=3.7.1; extra == "dev"
Provides-Extra: aws
Requires-Dist: boto3>=1.35.0; extra == "aws"
Requires-Dist: botocore>=1.35.0; extra == "aws"
Provides-Extra: gcp
Requires-Dist: google-cloud-aiplatform>=1.71.0; extra == "gcp"
Dynamic: license-file

# Switchboard — MCP↔ACP Governance Control Plane (Research Edition)

> Personal passion project exploring how to govern autonomous agent actions across MCP tools and ACP agent meshes with policy-as-code, human approvals, and signed provenance.

## Why This Exists (Research Framing)
- **Enterprise agents are real** – MCP connectors launched in ChatGPT Business/Enterprise (Oct 2025), AWS Bedrock AgentCore is GA, and Vertex Agent Engine is getting priced like a platform
- **Governance is lagging** – EU GPAI Code of Practice and IETF provenance drafts call for provable oversight across tool-using agents
- **Hypothesis** – A protocol-neutral “switchboard” can sit between MCP/ACP, add policy/approvals, and emit transparency logs that satisfy risk teams without throttling builders

This repo is a research sandbox, not a product. Expect detailed docs, reproducible demos, and lots of TODOs for future explorers.

## New in this Iteration
- ✅ **Persistent approvals** via `switchboard.storage` (SQLite by default, Postgres ready)
- ✅ **Cloud adapters** (AWS Bedrock AgentCore & Vertex AI Agent Engine) with dry-run defaults + live toggles
- ✅ **Expanded QA**: tox profile, Hypothesis fuzzing hooks, pytest-httpx for adapter simulation
- ✅ **Docs refresh**: research posture, onboarding guide, growth/media kit, operations runbook updates

## Quickstart (Local Sandbox)
```bash
# 1. Install dev deps
make install

# (optional) install cloud extras
make install-extras  # adds boto3 + google-cloud-aiplatform

# 2. Initialize the local SQLite backing store
make db-init

# 3. Seed OPA with the sample policies
make seed

# 4. Fire up the stack (API, MCP server, demo agent, approvals UI, OPA, OTEL)
make dev

# 5. Run the change-request storyline (allowed → needs approval → blocked)
make demo-e2e

# 6. Verify the signed audit trail
make audit-verify
```
Endpoints & consoles:
- API docs: http://localhost:8000/docs
- Approvals UI (accessible Streamlit): http://localhost:8501
- Audit log: `data/audit-log.jsonl`

## Architecture Snapshot
```
LangGraph Agent --> /route -----------------------------┐
                                                       |
                                                       v
                                               Policy Engine
                                               (OPA + local)
                                                       |
                                    ┌──────────────────┴──────────────────┐
                                    v                                     v
                            Approvals Store (persistent)      Audit Service (COSE + Rekor)
                                    |                                     |
                                    v                                     v
                        Streamlit UI / CLI Approvals          Transparency log entries
                                    |
                                    v
 Adapter Registry ──▶ MCP Adapter (Jira/GitHub)
                  └▶ ACP Adapter (partner agents)
                  └▶ Bedrock Adapter (dry-run/live)
                  └▶ Vertex Adapter  (dry-run/live)
```
Telemetry: OTLP traces + metrics, structlog JSON logs with redacted arguments.

## Persistence & Configuration
- `SWITCHBOARD_APPROVAL_BACKEND` – defaults to `persistent`; set to `memory` for ephemeral tests
- `SWITCHBOARD_DATABASE_URL` – defaults to `sqlite+aiosqlite:///data/switchboard.db`; set to Postgres DSN for multi-instance deployments
- `scripts/init_db.py` – bootstraps the schema; run via `make db-init`

## Cloud Adapter Cheatsheet
| Adapter | Enable | Mode | Env knobs | Notes |
| --- | --- | --- | --- | --- |
| AWS Bedrock AgentCore | `SWITCHBOARD_ENABLE_BEDROCK=true` | `SWITCHBOARD_AWS_MODE` (`dry-run` / `live`) | `AWS_REGION`, `AWS_BEDROCK_AGENT_ID`, `AWS_BEDROCK_AGENT_ALIAS_ID` | Requires `pip install .[aws]` for live mode; dry-run echoes payloads |
| Vertex Agent Engine | `SWITCHBOARD_ENABLE_VERTEX=true` | `SWITCHBOARD_GCP_MODE` (`dry-run` / `live`) | `GOOGLE_CLOUD_PROJECT`, `VERTEX_AGENT_ID`, `VERTEX_LOCATION` | Requires `pip install .[gcp]`; uses Google ADC for auth when live |

Both adapters default to **dry-run** to keep demos and tests deterministic. Flip to `live` when you want to hit real services.

## Testing & Evaluation
- `make qa` – lint (`ruff`, `black`), type check (`mypy`), tests
- `tox` – py311 environment with in-memory sqlite + hypothesis hooks
- `pytest` – now includes persistent store tests, adapter dry-runs, audit verification, and API integration tests
- `evals/runner.py` – extended runner emits latency + routing summaries; plug in your own Graph2Eval/SWE-Bench-Pro tasks
- Property-based testing foundation via `hypothesis` (see `tests/property/` once added)

## Documentation & Media Trail
New/updated files worth reading:
- `docs/GETTING_STARTED.md` – teammate onboarding 
- `docs/RESEARCH_POSITIONING.md` – why this is a research project, not a product
- `docs/GROWTH_PLAYBOOK.md` – ready-to-share posts, demo scripts, metrics to highlight
- `docs/TESTING.md` – QA matrix + manual checklists
- `docs/IMPLEMENTATION_PLAN.md` – detailed roadmap driving this update
- `docs/OVERVIEW.md`, `docs/ARCHITECTURE.md`, `docs/SECURITY.md`, `docs/OPERATIONS.md` – refreshed for persistence & adapters

## Adapting / Extending
- **Policies** – edit `switchboard/policy/*.rego`, re-run `scripts/seed_policies.py`
- **Adapters** – register new connectors in `switchboard/core/router.py` or extend `AdapterRegistry`
- **Storage** – plug in your own backend via `SWITCHBOARD_DATABASE_URL` (SQLite → Postgres)
- **Approvals UX** – customize Streamlit app (`apps/approvals_ui/main.py`) or swap in your SSO-protected frontend

## Contributions & Growth Hacking
This is still a personal research effort, but collaboration is welcome:
1. Read `CODE_OF_CONDUCT.md`
2. Check `TODO.md` and `docs/GROWTH_PLAYBOOK.md` for bite-sized tasks
3. Use `make qa` before PRs; CI (`.github/workflows/ci.yml`) runs lint + tests + tox stub
4. Share learnings! There’s a builder’s log + micro-post draft in `docs/GROWTH_PLAYBOOK.md`

## License
Apache-2.0 for the core. Optional enterprise features (SSO, hosted Rekor, advanced policy packs) remain future research ideas.

---

*If you explore or extend this repo, let me know what you discover—this is about pushing the state of agent governance, not shipping a SKU.*
