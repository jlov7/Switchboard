name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  SWITCHBOARD_APPROVAL_BACKEND: memory
  SWITCHBOARD_ENABLE_TELEMETRY: "false"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

jobs:
  lint-and-type-checks:
    name: Lint & Type Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]" bandit[toml] safety

      - name: Run pre-commit checks
        run: pre-commit run --all-files --show-diff-on-failure

      - name: Lint (Ruff)
        run: ruff check .

      - name: Format check (Black)
        run: black --check switchboard apps tests scripts evals

      - name: Type check (mypy)
        run: mypy .

      - name: Security scan (Bandit)
        run: bandit -r switchboard -c pyproject.toml -f json -o bandit-report.json || true

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  tests:
    name: Test Suite (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: lint-and-type-checks
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    env:
      IS_COVERAGE_RUN: ${{ matrix.python-version == '3.11' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        run: pytest tests/unit -v

      - name: Run integration tests
        run: pytest tests/integration -v

      - name: Run property tests
        run: pytest tests/property -v

      - name: Run tox (only py311)
        if: matrix.python-version == '3.11'
        run: tox -e py311

      - name: Coverage (only py311)
        if: matrix.python-version == '3.11'
        run: pytest --cov=switchboard --cov-report=xml --cov-report=term-missing

      - name: Upload coverage.xml
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unit
          name: codecov-switchboard
          fail_ci_if_error: false

  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    needs: lint-and-type-checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Safety
        run: python -m pip install --upgrade pip safety

      - name: Export requirements
        run: python -m pip install pip-tools && pip-compile --quiet --extra dev --output-file requirements-dev.txt pyproject.toml

      - name: Run Safety
        run: safety check --file=requirements-dev.txt --full-report --output=safety-report.json || true

      - name: Upload Safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/Dockerfile.api
          target: production
          push: false
          tags: switchboard-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build MCP image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/Dockerfile.mcp
          target: production
          push: false
          tags: switchboard-mcp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Smoke test images
        run: |
          docker run --rm switchboard-api:test --help || true
          docker run --rm switchboard-mcp:test --help || true
