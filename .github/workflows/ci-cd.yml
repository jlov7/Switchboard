name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.8.3'

jobs:
  # Code Quality & Security Analysis
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry virtual environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run pre-commit hooks
        run: |
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

      - name: Run Ruff linter
        run: |
          poetry add --group dev ruff
          poetry run ruff check --output-format=github .

      - name: Run Ruff formatter check
        run: |
          poetry run ruff format --check .

      - name: Run MyPy type checking
        run: |
          poetry add --group dev mypy
          poetry run mypy switchboard --ignore-missing-imports

      - name: Run Bandit security scanner
        run: |
          poetry add --group dev bandit[toml]
          poetry run bandit -r switchboard -f json -o bandit-report.json || true

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.json

  # Comprehensive Testing Suite
  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Poetry virtual environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install test dependencies
        run: poetry install --no-interaction --only test

      - name: Run unit tests with coverage
        run: |
          poetry run pytest tests/unit -v --cov=switchboard --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        run: |
          poetry run pytest tests/integration -v --tb=short

      - name: Run property-based tests
        run: |
          poetry run pytest tests/property -v --tb=short

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.api
          target: production
          push: false
          tags: switchboard-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build MCP Server Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/docker/Dockerfile.mcp
          target: production
          push: false
          tags: switchboard-mcp:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          docker run --rm switchboard-api:test --help || true
          docker run --rm switchboard-mcp:test --help || true

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Safety (vulnerability scanner)
        run: |
          pip install safety
          safety check --output json --save-json safety-report.json || true

      - name: Upload Safety report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety-report.json

  # Performance & Load Testing
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark

      - name: Run performance benchmarks
        run: |
          poetry run python -m pytest tests/performance/ -v --tb=short || true

  # Deploy to Staging (Manual Only)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, docker-build, dependency-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          echo "âœ… Deployed to staging successfully"

  # Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, docker-build, dependency-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add your production deployment logic here
          echo "âœ… Deployed to production successfully"

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        run: |
          # Generate changelog based on conventional commits
          echo "## What's Changed" > CHANGELOG_TEMP.md
          git log --oneline --since="1 week ago" >> CHANGELOG_TEMP.md || true
          echo "CHANGELOG_GENERATED=true" >> $GITHUB_ENV

      - name: Create Release
        if: env.CHANGELOG_GENERATED == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body_path: CHANGELOG_TEMP.md
          draft: false
          prerelease: false
